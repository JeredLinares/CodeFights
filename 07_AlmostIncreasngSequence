boolean almostIncreasingSequence(int[] sequence) {
    int a, b, count; 
    a=sequence[1];
    b=sequence[0];
    count=b>=a?1:0;
    
    for(int i=2;i<sequence.length;i++){
        if(a<sequence[i]){
            b=a;
            a=sequence[i];
        }else{
            if(b<sequence[i]){
                a=sequence[i];
                //replaced "a", kept B and kept the next int in the array
            }
            else{
                //don't keep the next in the the array and just ignor it
            }
            count++;
        }
        
    }
    
    
    return count<2?true:false;
}

/**
Given a sequence of integers as an array, determine whether it is possible to obtain a strictly increasing sequence by removing no more than one element from the array.

Example

For sequence = [1, 3, 2, 1], the output should be
almostIncreasingSequence(sequence) = false;

There is no one element in this array that can be removed in order to get a strictly increasing sequence.

For sequence = [1, 3, 2], the output should be
almostIncreasingSequence(sequence) = true.

You can remove 3 from the array to get the strictly increasing sequence [1, 2]. Alternately, you can remove 2 to get the strictly increasing sequence [1, 3].

Input/Output

[execution time limit] 3 seconds (java)

[input] array.integer sequence

Guaranteed constraints:
2 ≤ sequence.length ≤ 105,
-105 ≤ sequence[i] ≤ 105.

[output] boolean

Return true if it is possible to remove one element from the array in order to get a strictly increasing sequence, otherwise return false.
**/
