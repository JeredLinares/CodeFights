int[] sortByHeight(int[] a) {
    
    int[] trees = new int[a.length];
    int[] numbers = a.clone();
    int numTrees = 0; 
    
    for(int i=0 ; i<trees.length ; i++){
        if(a[i]==-1){
            trees[i]=-1;
            numTrees++;
        }
        else{
            trees[i]=0;
        }
    }
    System.out.println(numTrees);
    
    Arrays.sort(numbers);
    
    for(int e:numbers)
        System.out.print(e);
    
    int pos = 0; 
    for(int i = 0 ; i < trees.length ; i++){
        if(trees[i]==-1){
        
        }else{
            trees[i]=numbers[numTrees+pos];
            pos++;
        }
        
    }
    
    return trees;

}

/**
Some people are standing in a row in a park. There are trees between them which cannot be moved. Your task is to rearrange the people by their heights in a non-descending order without moving the trees.

Example

For a = [-1, 150, 190, 170, -1, -1, 160, 180], the output should be
sortByHeight(a) = [-1, 150, 160, 170, -1, -1, 180, 190].

Input/Output

[execution time limit] 3 seconds (java)

[input] array.integer a

If a[i] = -1, then the ith position is occupied by a tree. Otherwise a[i] is the height of a person standing in the ith position.

Guaranteed constraints:
5 ≤ a.length ≤ 15,
-1 ≤ a[i] ≤ 200.

[output] array.integer

Sorted array a with all the trees untouched.
**/
